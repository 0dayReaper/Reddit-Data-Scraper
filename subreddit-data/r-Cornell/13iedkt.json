{
    "id": "13iedkt",
    "score": 6,
    "title": "anyone else feel like CS 3110 is useless?",
    "author": "CornCornell",
    "date": 1684171495.0,
    "url": "https://www.reddit.com/r/Cornell/comments/13iedkt",
    "media_urls": [],
    "other_urls": [],
    "postText": "Idk, I feel like I learned all this content back in 2110, just feels like this course is just learning a new programming language which is cool but I\u2019m not sure it warrants a whole course since it just repeats a lower quality version of content like data structures taught in 2110",
    "comments": [
        {
            "level": 0,
            "comment": "It has more interesting projects and gives another way of reasoning through programs. It also touches on fundamental concepts that aren\u2019t taught in 2110..",
            "score": 21,
            "author": "medKnight-Bus5480"
        },
        {
            "level": 0,
            "comment": "Idk - I took 2112 and 3110 4 years ago - and I use knowledge from 3110 a lot in my job. It\u2019s obv not 1 to 1 but thinking in terms of functional programming has helped me a lot in creating robust and well coded systems.",
            "score": 13,
            "author": "blazed_platypus"
        },
        {
            "level": 0,
            "comment": "Imo, pure functional programming isn't that useful, but the high level concepts of functional programming are VERY useful, and will make you a better programmer.",
            "score": 26,
            "author": "BBboss8"
        },
        {
            "level": 0,
            "comment": "There is so much in 3110 that is useful. The paradigm of functional programming with immutable data structures has been regarded as a good idea for a long time, and now it's really taking off. Want to write mobile apps? You could use java, OR you could use (the more functional) kotlin, where your 3110 knowledge will help you. Maybe you want to write high performance/embedded code. You could use C or cpp, and spend hours of your life fiddling with libasan and gdb, or you could write rust, which looks a lot like ocaml. Even just the exercise of learning to program in different paradigms expands the way you will think about code for when you go back to OOP",
            "score": 6,
            "author": "eszlac"
        },
        {
            "level": 0,
            "comment": "Seems like you just didn\u2019t learn anything. Doesn\u2019t mean the class itself is useless",
            "score": 31,
            "author": "[deleted]",
            "replies": [
                {
                    "level": 1,
                    "comment": "This is a bad take. I loved the course but I understand OP\u2019s view. There was lots of overlap with material from 2110 that easily could\u2019ve been cut out. This made many lectures incredibly boring and feel pointless. However I do think that the overall programming skills and experience the class gives you learning a new programming language is very valuable overall. Especially the high level ideas that it brings up regarding the functional paradigm.",
                    "score": -1,
                    "author": "CornellBoy123456789"
                }
            ]
        },
        {
            "level": 0,
            "comment": "I don\u2019t think any of the material in 3110 was super useful but it drove home concepts from 2110 and overall made me a much more confident programmer",
            "score": 2,
            "author": "BigRedWeenie"
        },
        {
            "level": 0,
            "comment": "3110 is a way better class than 2110",
            "score": 2,
            "author": "StudyBio"
        },
        {
            "level": 0,
            "comment": "4110 is the bomb",
            "score": 1,
            "author": "CanadianCitizen1969"
        },
        {
            "level": 0,
            "comment": "Yeah it didn\u2019t help me lol",
            "score": 1,
            "author": "LeonhardEuler_"
        },
        {
            "level": 0,
            "comment": "we can make 2110 harder with the remaining topics reiterated in 3110 (all persistent data structures)... 3110 appears to have more topics in the past but curriculum has been changing over years (towards being easier).   \n\n\n3110 is like 2110 part 2 but in OCaml + some functional stuff.",
            "score": 1,
            "author": "the-slow-programmer"
        },
        {
            "level": 0,
            "comment": "Lecture was completely useless. The textbook was great tho, and while I don't like OCAML, being able to get a look into the functional paradigm was interesting. The last 2 projects were way too time consuming tho imo",
            "score": 1,
            "author": "Old-Umpire300"
        }
    ]
}