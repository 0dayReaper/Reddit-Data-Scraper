{
    "id": "tya6z4",
    "score": 16,
    "title": "Which Course-6 classes are/were the most and least fruitful to you?",
    "author": "[deleted]",
    "date": 1649327887.0,
    "url": "https://www.reddit.com/r/mit/comments/tya6z4",
    "media_urls": [],
    "other_urls": [],
    "postText": "Fruitful:\n\n1. You enjoyed\n2. You learned something new and useful\n3. Your skillset improved (in whichever way you may consider it)\n\nBasically which classes in EECS have the highest and the lowest return on investment?",
    "comments": [
        {
            "level": 0,
            "comment": "6.006 is pretty high return on investment because it teaches the information for the bulk of the questions in CS job interviews",
            "score": 16,
            "author": "lepardman6"
        },
        {
            "level": 0,
            "comment": "6.172 for understanding the performance implications of programming, felt like the first real gritty computer science class I'd taken.\n\n6.115 was great for getting practical experience for how embedded system design actually works, plus Leeb's lectures are phenomenal.\n\n6.131 was the point at which circuits \"clicked\" for me. Another Leeb class and definitely made me feel like an engineer by learning circuits through the design process; i.e. meeting specs for a system, building a circuit to complete a practical task.",
            "score": 8,
            "author": "HeyGuysIWantedToSay"
        },
        {
            "level": 0,
            "comment": "In terms of software, or in general? In any case:\n\nLeast useful: 6.UAT and 6.031\n\nMost useful: 6.033, 6.034 (Winston was a legend, the foundation you build is strong), 6.858\n\nMost interesting, albeit not useful: 6.853 (too theoretical and I don't work on markets/pricing), 6.860 (occasionally useful, depends on what I'm modeling)\n\n**Wish I had taken:** 6.824",
            "score": 8,
            "author": "whymauri"
        },
        {
            "level": 0,
            "comment": "Whether or not a class was useful depends largely on the instructor. Not 6.uat though. \n\nThat piece of shit class has never been useful to a single being in the multiverse. It can get significantly shittier depending on who your recitation instructors are. If I had a magic wand, I wouldn't wish for world peace because the lack of world peace is the direct consequence of the existance of 6.uat. Every good engineer knows that the right way to solve a problem is to go to its roots. Guess which class didn't teach me that? That's right, 6.uat. If I had a nickel every time someone stopped me on the street and asked me to explain what quantum tunneling is in ~8 minutes in layman's terms, I would have a billion dollars because I would have also won the lottery. You know, every lecture, the professor would be like: \"you shouldn't be learning your presentation by heart\", \"you should be able to come up with this stuff on the go\", \"you have to adapt real-time to your audience\". And then, you give your by heart learned presentation and the graders are like \"at 2:32 you stuttered, this confused the audience and you seemed not confident in what you were saying - 3.0 (B)\". Even if I were the most charismatic smartest wittiest hottest sexiest most eloquent human with the smoothest voice, I would probably still be struggling in this class and end up hating it. If someone said: \"I will pay you $80/hour to attend this class, and I will also be your sex slave that will take care of you financially so you'll be able to spend all your hard earned money on your sidehoes\", I would still say: \"no thank you, the emotional damage I would suffer from 6.uat would be too much to keep even a fraction of my sanity\".\n\nSo yeah, I'd argue 6.uat is probably the lest fruitful class you can take at MIT.",
            "score": 16,
            "author": "Bradley_Sives"
        },
        {
            "level": 0,
            "comment": "The curriculum has changed a lot since my time, but I really enjoyed and learned a ton from the old 6.170 (software engineering lab). How to divide work among a team, how to deal with a codebase that's changing because of work others do, how to deal with vague and changing requirements, how to adjust as you realize your foundational architecture has flaws, and through all of this, the value of simple, flexible, testable code over cleverness and optimization.\n\nI agree with the 6.UAT hate, and also some other class that I can't remember the name or number of that was basically a technical writing class. I get that MIT is trying to avoid creating technically brilliant engineers who can't write or speak worth a shit, but everyone is so hosed by their technical classes that they just try to get by in these classes do the bare minimum to pass while not actually learning anything. Which is fine, smart people will pick up communication skills on the fly as needed.",
            "score": 2,
            "author": "maestro2005"
        }
    ]
}