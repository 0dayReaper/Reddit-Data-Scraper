{
    "id": "108mlds",
    "score": 0,
    "title": "Completing a MIT Computer Science Degree without actually going to MIT",
    "author": "Ok_Abbreviations3220",
    "date": 1673388487.0,
    "url": "https://www.reddit.com/r/mit/comments/108mlds",
    "media_urls": [],
    "other_urls": [
        "https://www.youtube.com/watch?v=oo-ctqruwRc&amp;t=2s](https://www.youtube.com/watch?v=oo-ctqruwRc&amp;t=2s)",
        "https://www.scotthyoung.com/blog/myprojects/mit-challenge-2/](https://www.scotthyoung.com/blog/myprojects/mit-challenge-2/)",
        "http://catalog.mit.edu/degree-charts/computer-science-engineering-course-6-3/)"
    ],
    "postText": "Hi all,\n\nI remember watching a video on YouTube about a guy, called Scott Young, who completed the entirety of the MIT computer science undergraduate curriculum in under 1 year.  \nLink to the video : [https://www.youtube.com/watch?v=oo-ctqruwRc&amp;t=2s](https://www.youtube.com/watch?v=oo-ctqruwRc&amp;t=2s)  \nHe also created a blog for it : [https://www.scotthyoung.com/blog/myprojects/mit-challenge-2/](https://www.scotthyoung.com/blog/myprojects/mit-challenge-2/)  \n\n\nAlso note that he didn't formally enter into MIT's Computer Science Undergraduate Degree as a student, but he mirrored the content  as much as possible to what a typical MIT student would do in their 4 year undergraduate program in computer science.  \n\n\nOf recently I have felt deeply inspired to try and mimic what this guy has done, I don't seek to get a formal qualification but rather just gain the knowledge in a subject I have been deeply passionate about. The problem is that I'm a bit oblivious on where to start (hence the reason I'm writing the post).  \n\n\nThe person who created the original challenge completed it over a decade ago and I'm sure the content that he did would vary from the curriculum of today since Computer Science is a dynamic field. Though please correct me If I am wrong.  \n\n\nFrom what I could find is the topics you cover :  [Computer Science and Engineering (Course 6-3) &lt; MIT](http://catalog.mit.edu/degree-charts/computer-science-engineering-course-6-3/)   \n\n\nI have a few questions as well :   \n\n\n1. Can you give me a top down abstract view on what a typical MIT student does in order to graduate? How much test scores matter and the amount of classes needed to graduate.  \n\n2. What text-books do you use during your undergraduate degree  \n\n3. Relating To Test's is it possible to find public exam questions relating to a module in the curriculum?",
    "comments": [
        {
            "level": 0,
            "comment": "Class numbers in course 6 have changed, OCW might not be updated with those changes. You can look up a directory of new to old numbers using google. \n\nOne his website he mentioned not doing all problem sets, which I think is a mistake because the majority of learning happens on problem sets and projects, and exams are just a way to make sure you understood the basics of what they taught.",
            "score": 20,
            "author": "waterRK9",
            "replies": [
                {
                    "level": 1,
                    "comment": "Thanks for the reply. I totally agree with the point that you need to do problem sets to truly understand the topic at hand.  Also  where do I find the problem sets for each respective module or are they not public?",
                    "score": 1,
                    "author": "Ok_Abbreviations3220",
                    "replies": [
                        {
                            "level": 2,
                            "comment": "They might not be public. The issue with some OCW classes is that they don't have all class information uploaded. Different years have different amounts of information.",
                            "score": 3,
                            "author": "waterRK9"
                        },
                        {
                            "level": 2,
                            "comment": "Hey, im doing a similar project for physics rn inspired by scott young. Some words of wisdom, doing the problem sets burn through time, like a lot of time. \n\nScott youngs metric for success was passing the final exam in 1 week so he ended up not doing a lot of the time consuming assignments that would give him a much deeper understanding.\n\nAt the end of the day his goal was speed, complete classes fast, and score above 75% which is respectable. His hope wasnt to understand material at the deepest level, but to learn enough information to pass the course.\n\nSo essentially, trying to go for more depth by doing problem sets will add a lot of time. Whether its possible to gain a ton of depth and complete the CS cirriculum in a year, im not sure, i lean towards the thought of \"just barely.\"\n\nAnd note, im not a scott young hater, im not saying he only suceeded because he was aiming just to pass the class, i think if he had to do his project again but aimed for a deeper understanding and to pass, he would somehow find a way to do that.\n\nBut if this is ur first or 2nd ultralearning project like me, you will have to make some tradeoff between depth and speed while you are learning the basics of learning, and gradually you will find ways to optimize both.\n\nIf you have more questions about my own experience so far, dm me on discord SnowZillin#4335",
                            "score": 1,
                            "author": "SnowZilla2",
                            "replies": [
                                {
                                    "level": 3,
                                    "comment": "Thanks I will be sure to DM you in due time.",
                                    "score": 1,
                                    "author": "Ok_Abbreviations3220"
                                }
                            ]
                        }
                    ]
                },
                {
                    "level": 1,
                    "comment": "I just want to reaffirm this: you \\*need\\* to do the psets to get the intended value from MIT courses in general (this is reflected in the fact that psets are usually worth a nontrivial part of your final grade)--especially in computer science where some of the heavy coding classes have no exams or exams which really only cover the parallel theoretical info (not the coding skills). In general, pset problems are substantially harder than exam problems, since you might only have 4 problems on a pset which takes you 5-8+ hours.",
                    "score": 1,
                    "author": "mariemusic"
                }
            ]
        },
        {
            "level": 0,
            "comment": "For question 2, probably the best resource is OpenCourseware: [https://ocw.mit.edu/](https://ocw.mit.edu/). The total material is vast and the number of different paths a student takes, even in 6-3, is pretty varied. I'm not going to be able to list the materials I used, partly because I can't remember a lot of it.\n\nNot sure how to answer 1. You follow a certain curriculum. Typically you take four courses per semester, and ideally at least one of them is in your major. You punt problem sets and pull all nighters. You have to learn to swim and pass a certain number of physical education credits and communications requirements. Your first exam as a freshman shocks you into study mode before you realize everyone fails their first exam.",
            "score": 10,
            "author": "[deleted]",
            "replies": [
                {
                    "level": 1,
                    "comment": "I'd also add that you can find more recent versions of many of the courses simply by googling the course name or number. A good number of them have public websites",
                    "score": 1,
                    "author": "strudelnooodle"
                },
                {
                    "level": 1,
                    "comment": "Thanks for your response. Regarding the second question I'm using the OpenCourseWare website you just linked, some modules are able to be indexed such as  18.06 Linear Algebra but others will not return a course such as 6.100A - Introduction to computer Science programming in python. I'm not too sure if I'm just inputting them wrong into the search engine or those lectures aren't publicly available.",
                    "score": 1,
                    "author": "Ok_Abbreviations3220",
                    "replies": [
                        {
                            "level": 2,
                            "comment": "The course numbers changed very recently, so you'll have to look up the old course numbers. I'm not sure if there's an external database of the old numbers available because most students learn the numbers from exposure over time.",
                            "score": 1,
                            "author": "AegisOW"
                        }
                    ]
                }
            ]
        }
    ]
}