{
    "id": "13ovd6p",
    "score": 12,
    "title": "Determining Tech Stack for Startup",
    "author": "brassmarlin",
    "date": 1684772225.0,
    "url": "https://www.reddit.com/r/startups/comments/13ovd6p",
    "media_urls": [],
    "other_urls": [],
    "postText": "I'm the founder of a startup focused on supply chain management and maximizing the sustainability of products (my background and the software is centered around chemistry). We are currently in the development phase and are seeking advice on creating a scope for our MVP without a technical founder on our team.\n\n\rWe have our requirement's, and we know what our customers want. We just need to build it.\r Our biggest challenge is selecting the appropriate tech stack for our application. As a non-technical team, I would greatly appreciate advice on the following:\n\n\rSelecting the right tech stack: With limited technical knowledge, how do we choose the most suitable tech stack for our application? What factors should we consider, such as scalability, flexibility, security, and industry standards? W/o getting into the details here are there any good ways to translate requirements into specific technologies?\n\n\rAssessing technical requirements: Are there ways to educate ourselves on the technical resources and infrastructure needed to build our MVP? What factors should we consider when evaluating the technical complexity and scalability of our solution? Are there any recommended best practices or tools to streamline the development process?\n\nWe are looking for the right person as much as possible, but it is hard to drum up interest w/o an MVP.",
    "comments": [
        {
            "level": 0,
            "comment": "Your asking how can I become a software  technical architect in a week? That's not possible. Find a friend or a friend who knows a friend and is a software engineer to offer his advice. Next solution, hire a person with a good years of experience to take over the tech stuff.",
            "score": 28,
            "author": "Just_a_guy_345"
        },
        {
            "level": 0,
            "comment": "Everyone's giving you some backhanded responses, but the reality is that this type of company (a tech co w/o a tech founder) gets started all the time.  \n\nI have 3 pieces of advice:\n\n* If you have someone in mind already for the CTO / technical co-founder role, ask them.\n* If you are unsure about this decision, you should not be hiring a cheap/junior freelancer to do the work. You should seek out a reputable development shop or startup veteran to help make these choices for you.\n* For many, many startups, your first version will get thrown in the trash.  This holds true if you have a CTO or not.  Keep this in mind.  All you really need to do is get a product in market. Then, whenever you hire your CTO, they might undertake the process of rewriting the app in whatever tech stack they decide should be best.",
            "score": 22,
            "author": "noodlez",
            "replies": [
                {
                    "level": 1,
                    "comment": "Thanks! This is super helpful. The first few \u201ctech\u201d people we talked to told us it was going to be a 6 figure build from one of the def shops. We weren\u2019t able to get clear reasons out of them why that would be the case. I kind of drifted away from that route, but i didn\u2019t look into it as thoroughly as i should have. Appreciate it.",
                    "score": 1,
                    "author": "brassmarlin",
                    "replies": [
                        {
                            "level": 2,
                            "comment": "Pay now or pay later. I just made 6 figures repairing a startups crappy mobile application.",
                            "score": 3,
                            "author": "FlutterLovers"
                        },
                        {
                            "level": 2,
                            "comment": "You won\u2019t get anything but muddy water responses.  Building software is simply not a fixed fee endeavor.  The best you will get is a guess that can be off by a factor of somewhere around 10, and it\u2019s always 10 times more expensive, not 10 times cheaper.  You need to be prepared for this.",
                            "score": 1,
                            "author": "Longjumping-Ad8775"
                        }
                    ]
                },
                {
                    "level": 1,
                    "comment": "Thanks! This is super helpful. The first few \u201ctech\u201d people we talked to told us it was going to be a 6 figure build from one of the def shops. We weren\u2019t able to get clear reasons out of them why that would be the case. I kind of drifted away from that route, but i didn\u2019t look into it as thoroughly as i should have. Appreciate it.",
                    "score": -1,
                    "author": "brassmarlin",
                    "replies": [
                        {
                            "level": 2,
                            "comment": "Development is hard and the people that do it are very expensive. That's the answer for you :)",
                            "score": 10,
                            "author": "SabreDev"
                        },
                        {
                            "level": 2,
                            "comment": "Hard to say without knowing more, but 6 figures isn't crazy, depending on what you're going to get.  Don't forget that you're paying a premium for *availability* and *parallelization*.  Something that you aren't getting from whoever you hire as CTO/tech cofounder.",
                            "score": 8,
                            "author": "noodlez",
                            "replies": [
                                {
                                    "level": 3,
                                    "comment": "That is the tricky part. We are a first time team with a not great network. Coming up with that kind of money to get into the game seems to require an MVP. Can't get an MVP without the money.\n\nPretending a rich relative drops dead and suddenly six figures is found what are things to be aware of when approaching these dev shops? Is it fairly easy to suss out if they are legit or are there some things to be wary of?",
                                    "score": 1,
                                    "author": "brassmarlin",
                                    "replies": [
                                        {
                                            "level": 4,
                                            "comment": "&gt;Coming up with that kind of money to get into the game seems to require an MVP.\n\nIt doesn't.  There are companies that can raise w/o an MVP.  MVP helps a whole lot, but its do-able to raise w/o.  There are many CTOs out there who think that if you can't convince a VC to give you money that you aren't worth joining as a CTO or technical co-founder due to the abundance of VC $ and the scarcity of experienced technical co-founders.\n\nYou can also seek alternative paths, like a startup lab or similar.   Or just a bank loan, personal credit, etc..\n\n&amp;#x200B;\n\n&gt;Can't get an MVP without the money.\n\nYou find a technical co-founder.\n\n&amp;#x200B;\n\n&gt; Is it fairly easy to suss out if they are legit or are there some things to be wary of?\n\nAsk your local ecosystem or professional network for referrals.  The best vote is worth of mouth.",
                                            "score": 2,
                                            "author": "noodlez",
                                            "replies": [
                                                {
                                                    "level": 5,
                                                    "comment": "Thanks for these insights. It is really helpful for shaping our strategy moving forward. Seems like it is more valuable to spend our time looking for funding and tech folks than it would be putting together a shitty MVP on our own.",
                                                    "score": 1,
                                                    "author": "brassmarlin"
                                                }
                                            ]
                                        },
                                        {
                                            "level": 4,
                                            "comment": "Sometimes an mvp isn't an app... Sometimes it's a spreadsheet in excel that produces results you can validate with a customer. Sometimes it's a nocode solution you've drag and dropped together. Think outside the box.",
                                            "score": 1,
                                            "author": "Hephaestite"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "level": 2,
                            "comment": "6 figures is a normal-to-low amount to pay for a decent MVP of the average app.",
                            "score": 4,
                            "author": "LogicalGrapefruit"
                        },
                        {
                            "level": 2,
                            "comment": "6 figures to build an mvp is well within the range you'd expect (depending on what the mvp actually does). Hell I've charged double that for Ecommerce websites.\n\nIf you don't want to spend that much then I suggest you validate your mvp in a cheaper way, but I can't tell you what that might look like without knowing the proposition...",
                            "score": 1,
                            "author": "Hephaestite"
                        }
                    ]
                }
            ]
        },
        {
            "level": 0,
            "comment": "Find a good developer and use the stack they are most familiar using. Pay more for a developer that can make a better decision, and less of you just want it finished quickly.",
            "score": 8,
            "author": "danjlwex"
        },
        {
            "level": 0,
            "comment": "Look at your local (or remote) job market and pick whatever is easiest to hire for. Ultimately, tech doesn't matter that much (saying this as someone who's been building startups since 2007).",
            "score": 6,
            "author": "yamalight"
        },
        {
            "level": 0,
            "comment": "I built our first mvp on \u201cquick\u201d tech like JavaScript. We pivoted multiple times but only ever changed the tech, we didn\u2019t rewrite it. Ive spent the last 6 months rewriting it all properly and will still spend another few to get back to where we were on the old stack.\nMy advice, don\u2019t try and cut corners by choosing an easy tech stack, reduce scope of your project.\nAnd for the love of god, hire a CTO. I\u2019ve done freelance for startups that didn\u2019t have a cto and it was always slow and painful. I didn\u2019t fix their problems because it wasn\u2019t my problem.",
            "score": 3,
            "author": "New_York_Rhymes",
            "replies": [
                {
                    "level": 1,
                    "comment": "I would be careful with this comment. There's a number of variables that we don't know that's causing it to take 6 months. e.g. # of developers, are they part-time/full-time, is this a hobby project or is this an enterprise level app(hundreds of thousands of lines), how efficient are the programmers, etc.",
                    "score": 1,
                    "author": "ragnorok3",
                    "replies": [
                        {
                            "level": 2,
                            "comment": "Unless the product is extremely basic, poor tech will always need to be redone and it comes at a cost. Ultimately you only save time in the first few weeks but afterwards you pay for it constantly, and that just isn\u2019t worth it if it\u2019s a medium to large scale project. At least for me. I think an experience cto can get a decent mvp done in good time on good tech.",
                            "score": 1,
                            "author": "New_York_Rhymes",
                            "replies": [
                                {
                                    "level": 3,
                                    "comment": "Yeah, I agree.",
                                    "score": 1,
                                    "author": "ragnorok3"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "level": 0,
            "comment": "Best suggestion is to find a tech co founder",
            "score": 2,
            "author": "Dakadoodle"
        },
        {
            "level": 0,
            "comment": "Hey there,\r  \n\r  \nIt's great to see your commitment to building a sustainable supply chain management solution. I understand that developing an MVP without a tech founder can be challenging, but I'm here to help. Let me share some key points for you to consider when choosing a tech stack and evaluating your technical requirements.\r  \n\r  \n**First, make sure your tech stack aligns with your long-term vision and goals.** Think about scalability, flexibility, security, and industry standards. Research popular tech stacks in your industry and consult with experienced developers to make an informed decision.\n\n**Understand your target audience and their needs**. Will your MVP cater to specific industries or a wide range of businesses? This knowledge will influence the scalability and complexity of the solution.\r  \n\r  \n**Determine the nature of the supply chain you're addressing.** Are you focusing on perishable goods, non-perishable goods, or a combination of both? This will impact factors like system performance, tracking requirements, and database structures.\r  \n\r  \n**Decide whether your platform will involve payment processing**. If so, you'll need to consider security measures, compliance requirements, and integration with payment gateways.\r  \n\r  \n**Determine if your platform will include features like route optimization, real-time tracking, or mapping capabilities**. These functionalities may require additional technical considerations and integration with external APIs or services.\r  \n\r  \n**If your solution involves international supply chains**, consider the complexities associated with customs, regulations, currency conversion, and shipping logistics. These factors will impact the technical requirements and potentially the choice of tech stack.\r  \n\r  \n**Assess the data requirements of your solution**. Think about the types of data you'll be handling, the volume of data, and the need for data analytics and reporting. This will help you determine the appropriate database structures and technologies to support your MVP\r  \n\r\n\n**Go for a tech stack that allows for rapid development and deployment**. This way, you can save valuable time and resources, enabling you to iterate quickly and respond promptly to customer feedback.\r  \n\r  \n**Tutorials, forums, and documentation can be a treasure trove of knowledge** to help you understand the technical aspects of building your MVP. By arming yourself with this information, you can make informed decisions and effectively communicate with developers.\r  \n\r\r\r  \n**Don't forget to seek expert advice**. Engage with experienced developers or technical advisors who can provide guidance on selecting the right tech stack and evaluating your technical requirements. They can also help you navigate any trade-offs or challenges associated with different technologies.\r  \n\r  \nI have access to resources specifically geared towards helping startups like yours overcome the challenges you're currently facing. They offer valuable insights and guidance on building your MVP without a tech founder. They can also support you in areas such as product development, digital marketing, and securing funding. On top of that, I can connect you with a community of bootstrapped founders who share your passion for sustainability and have successfully tackled similar challenges.\r  \n\r  \nIf you're interested**, I'd be more than happy to arrange a no-obligation call with one of our solution architects**. They can delve into your concerns and explore potential solutions tailored to your needs",
            "score": 2,
            "author": "Nazim_Nizar",
            "replies": [
                {
                    "level": 1,
                    "comment": "cut your pitch in half.  its way too long and it has some superfluous fluff in it that otherwise detracts from the core messaging.\n\n&amp;#x200B;\n\nbrevity is the soul of wit; and a good sales pitch.",
                    "score": 2,
                    "author": "KusUmUmmak",
                    "replies": [
                        {
                            "level": 2,
                            "comment": "The first paragraph feels very chatgpt",
                            "score": 2,
                            "author": "Impossible_Map_2355"
                        }
                    ]
                }
            ]
        },
        {
            "level": 0,
            "comment": "I was in a similar position couple of years ago (have a technical background but not web dev per se). Now that we went through it, here's what we learned:\n\n\\- For web frontend, you won't go wrong with React. It is the most dominant framework, and it's on a trajectory to remain so for several years. It has been easy to use and implement, and finding devs is easy too.\n\n\\- For the database, it seems you have a relational data model. I would suggest Mysql (very easy to use and free) or Postgres. Either of them should be able to handle your work easily.\n\n\\- For the backend, I personally recommend nodejs. It makes life easier since it's built around Javascript which you will be using for React.\n\n\\- Also, bear in mind that these choices also comes to what your team is proficient with. If you have a team that does Ruby etc.., you might wanna stick to that.\n\nYou'd also need some infrastructure, AWS, etc.. which hopefully one of your engineers can guide you through...\n\nhope that helps..",
            "score": 2,
            "author": "TheBeardMD"
        },
        {
            "level": 0,
            "comment": "Someone told me that picking a tech stack for your startup isn't about what's flashy\u2014it's about what fits. And I kinda agree with it. Personally, I stand for one simple rule - understand your business, your team, and your market.\n\nChoose tech that's adaptable and scales with your growth, supported by a robust community and documentation. Budget and timing are key, too\u2014don't break the bank and consider what gets you to market quickest. And never, ever skimp on security. Think strategy, not just technology.\n\nGood luck, you've got this!",
            "score": 2,
            "author": "VldkK"
        },
        {
            "level": 0,
            "comment": "For a basic MVP/demo for a mainly-CRUD business web app, Laravel or Rails is suitable. In those web frameworks, the decisions on key libraries are all made for the user, plus they rely on relational databases instead of NoSQL like MongoDB in MERN. Relational databases are a better fit for most business apps. (Github and Shopify were built on Rails; Laravel is younger but has been growing fast over the past 6 years.)\n\nGet a freelancer/budget team to build this throwaway *demo* - it's not for real customer use and requirements will definitely change as you search for product-market fit, so dropping 100-200k on a solid dev house may not be the best plan.\n\nUse the demo to attract interest from customers and investors while you also keep searching for an experienced lead engineer or CTO (someone with at least a few years of experience in business web apps). The lead/CTO should work on choosing a tech stack and replacing the whole MVP once they come on-board, taking the newly gathered requirements and changing future plans into consideration. Scalability, flexibility, security, etc. are all the bread and butter of an experienced engineer or tech lead.",
            "score": 4,
            "author": "creamyhorror"
        },
        {
            "level": 0,
            "comment": "Pick the first thing, MERN, and get an mvp out quick\u2026 you Can rebuild tech stacks later.",
            "score": 0,
            "author": "TheTechonomics",
            "replies": [
                {
                    "level": 1,
                    "comment": "[deleted]",
                    "score": 0,
                    "author": "[deleted]",
                    "replies": [
                        {
                            "level": 2,
                            "comment": "This is one of my concerns as well. We\u2019re just going to have to make decisions though i guess. I want to build on a strong foundation, but if i waste a million years building a strong foundation\u2026 I\u2019m leaning towards making progress and educating myself along the way. I don\u2019t have the experience to interview effectively. This feedback at least gives me areas to research and learn about. Soo I\u2019m better off than i was. Thanks",
                            "score": 1,
                            "author": "brassmarlin"
                        },
                        {
                            "level": 2,
                            "comment": "Having a cobbled together product that is making revenue is always 100% better than hemming and hawing over tech stacks that don't matter and never building anything.\n\nI used to research very intensely what stack to use when I was fresh.\n\nNow I just build super fast in Vue and Firebase no matter what.",
                            "score": 1,
                            "author": "leesfer"
                        }
                    ]
                }
            ]
        },
        {
            "level": 0,
            "comment": "Choose technologies that you can build quickly with (spoiler: JavaScript). Even better, consider using mature customisable platforms as a base (e.g. Drupal)\n\nTry to buy over build: e.g. consider paying for auth services rather than rolling your own - nothing worse than wasting a sprint on a \u201cforgot password\u201d facility.\n\nDon\u2019t worry about infrastructure and scalability for an MVP, worry about getting people using it instead.",
            "score": 1,
            "author": "Choice_Intention7720",
            "replies": [
                {
                    "level": 1,
                    "comment": "Thanks! I had forgotten about drupal. That is interesting alot buy one build. We are talking to CTOs for hire and developers for equity, but didn\u2019t think about taking that mindset smaller scale.",
                    "score": 2,
                    "author": "brassmarlin",
                    "replies": [
                        {
                            "level": 2,
                            "comment": "Just to follow up, the best practice for MVP development I advise my startups are: launch quickly and iterate. This means your MVP should really be \u201claunched\u201d (in users\u2019 hands) after every sprint, so your first version launched after 2 weeks (maybe 4 weeks). After users have used it, apply user feedback then launch again - rinse and repeat.\n\nIf you\u2019re thinking that your MVP will take months to build, then your starting point is too large.\n\nCommunication is also key, especially with people who don\u2019t really know each other. The classic friction points are: thinking the tech person is taking too long, not being happy with what\u2019s produced, tech person not happy about uncertainty and changing requirements.\nSet up a safe environment where these things can be discussed in a regular basis.\n\nCTOs don\u2019t code, but usually this is the job title that gets given to the tech person in the team. You don\u2019t have to do this, you just need someone to build the product.",
                            "score": 1,
                            "author": "Choice_Intention7720"
                        },
                        {
                            "level": 2,
                            "comment": "Yes to Drupal, it's an incredibly efficient framework to build a startup.  I have been developing with Drupal alongside others using the latest hot frameworks for a decade. I see them work for months and when they show me the results, I can't help but laugh and tell them their MVP could have been built in weeks with Drupal.  \n\nDrupal is like Lego where you have thousands of blocks ready to assemble.  You can add front-end apps and back-end data processing when they are needed and have Drupal  function as enterprise middleware. For a MVP you don't want to waste time and money building from scratch.  \n\nDrupal is used by 70% of the fortune 500, many top universities, and huge government agencies. Investors appreciate a stable and secure framework used by billion dollar enterprises.",
                            "score": 1,
                            "author": "pixelrow"
                        }
                    ]
                }
            ]
        },
        {
            "level": 0,
            "comment": "[removed]",
            "score": 1,
            "author": "[deleted]"
        },
        {
            "level": 0,
            "comment": "Here's the thing, you can't evaluate if the answers you get are right or wrong; and even less so if they fit your requirements.\n\nYou need to recruit (as in making it in-house) the knowhow to make these decisions.",
            "score": 1,
            "author": "downtownflurry"
        },
        {
            "level": 0,
            "comment": "What you build now will almost certainly be thrown away. So build with whatever makes you quick",
            "score": 1,
            "author": "andrewm1986"
        },
        {
            "level": 0,
            "comment": "For a startup, there are a few factors to consider, such as:  \n1. The skill set of your current development team.  \n2. The most popular languages, frameworks, and tools for easy replacement.  \n3. The specific needs of your startup.",
            "score": 1,
            "author": "ChapaGPT"
        },
        {
            "level": 0,
            "comment": "While you continue your hunt for a qualified lead engineer or CTO, you may use the demo to pique the curiosity of potential clients and investors.",
            "score": 1,
            "author": "VirtuousPelican"
        },
        {
            "level": 0,
            "comment": "Someone in this thread might actually be able to give you a good answer if you actually shared a bit more about the idea. What tech pieces does it need? How complicated do you anticipate the data models being? Will it need a web frontend, or will it be an installable software client? Will it require data streams, and what kind, how often and what volume?\n\nDon't worry too hard on scalability unless you actually anticipate very high usage - I've seen companies spend absolutely rediculous amounts of money on highly scalable serverless solutions for applications that are only used by no more than a couple hundred people a day.",
            "score": 1,
            "author": "Space-Tsundere",
            "replies": [
                {
                    "level": 1,
                    "comment": "First off thanks for your questions. They get to the heart of my ignorance. How complicated will the data models be? I believe they are complicated, it will need a web frontend, I believe it will require datastreams. The volume will be low. I am not worried about scalability at least in the beginning. There won't be a huge amount of data. The complexity comes in how the data interacts with each other and user permissioning.\n\nBackground: this software will be used by final manufacturers and the suppliers of those manufacturers. To achieve certification they need to know 100% of the chemical composition of all the materials that are in their product.\n\nFor an example we will use a tshirt. The shirt is made up of wool, cotton, polyester and dyes. Each of those materials is sourced from a different supplier and each material has its own list of ingredients that is proprietary to each supplier. The final manufacturer can't know that proprietary information in order to protect each supplier. While enforcing that confidentiality the software will use an algorithm to assess the sustainability of each of the different ingredients to determine what specific items are of concern and how they can be optimized to achieve certification.\n\nThere are different requirements, health hazards and environmental variables that have to be considered as well. I am going to stop there and hope that explanation was sufficient and not insufferably boring.",
                    "score": 1,
                    "author": "brassmarlin",
                    "replies": [
                        {
                            "level": 2,
                            "comment": "From the sounds of it you'll be dealing with less than say 1 million different products and you'll only be running the analytics of each material once - at the point at which you insert the record into your database. (e.g you get the information about a t-shirt, work out the ingrediants, hazards etc. and then store it in a datatable).  - although you might like the freedom to change compositions relatively easily as new information comes out.\r  \n\r  \nIt sounds like you won't have to worry about user concurrency much if it's only a few stakeholders for a handful of clients. Scalability is very expensive both in talent and infra costs. Because of this I wouldn't worry too much about scaling. \n\nBecause the data sounds like it has a lot of relations i'd suggest using RDS database instead of something like NoSQL as you'll want to make sure your relations stay solid. A great benefit to using RDS is that if say a supplier changed name or the compliance hazards of a particular material came about you could change these references in a single location rather than across your entire dataset. \n\n\rIf I was making this myself or for a client i'd use Django (BE) (or a not dissimilar framework in the developers language), Postgres (DB) and React  (FE) and you should be good. Someone else mentioned the MERN stack which isn't far off - although I believe the NOSQL aspect of it would be a mistake and could be very cumbersome to rectify later on in the product life.  React could be dropped depending on how 'flashy' or not you want the app to be - if you want the website to look dynamic and alive and have things like charts for product compositions and stuff you might want this.\n\nI disagree what other people say about the first iteration being disposable - if it's well planned from the beginning and you get a decent dev you  could be set up quite well in the long term. If you get someone Full Stack make sure they are solid in the backend and has strong experience with auth and data models. - there are tons and tons of frontend developers that call themselves full stack because they know how to dump JSON into a store which given your data heavy application is not what you want.",
                            "score": 2,
                            "author": "Space-Tsundere",
                            "replies": [
                                {
                                    "level": 3,
                                    "comment": "Thanks for the depth. It sounds like you honed in on the requirements pretty quickly. It is also relieving to hear that the right person shouldn't really be overwhelmed by this project.\n\nThanks for giving me some specifics to ask the devs about as well. That has been a real gap for me. I have been having a hard time finding the right questions to ask to be confident that the person I am talking to actually has the skills necessary.\n\nI agree with you about trying to build a first iteration that can be built upon. The team is doing the dance of do we just create something right now so we can get investors or do we slow our roll and build something that doesn't have to be thrown away. Thanks for your time.",
                                    "score": 2,
                                    "author": "brassmarlin",
                                    "replies": [
                                        {
                                            "level": 4,
                                            "comment": "I\u2019m still reading through this post but I\u2019m a developer and might be interested in working on the project with you. Shoot me a dm if you\u2019re interested. I can do sql (relational db) and the full stack.",
                                            "score": 1,
                                            "author": "Impossible_Map_2355"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "level": 2,
                            "comment": "It doesn't sound too bad in terms of data models. It just sounds like you need to sit down and figure out the taxonomy. Like mentioned above you can use a PSQL db. Start with a base taxonomy then allow users to be able to add items manually if they don't see an option. You may not need streaming if a user is only looking at the page once. e.g. you can just have the data be refreshed when the user revisits the page or clicks refresh.",
                            "score": 1,
                            "author": "ragnorok3",
                            "replies": [
                                {
                                    "level": 3,
                                    "comment": "Thanks for the input. You have given me a couple things to look into. I hadn't heard the term taxonomy before, but based on the functionality you described we do want users to be able to make updates and changes without any drama as well as adding fields that don't currently exist.",
                                    "score": 1,
                                    "author": "brassmarlin"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "level": 0,
            "comment": "From a recruiting perspective, stay away from CTOs, VP + roles unless they started at this stage. You need doers and builders not consulting strategists.   \n\n\nWhen you get \"It will cost 150k to have this built from a dev shop\" the problem isn't necessarily the 150k. It's the mindset. If you are able, hire someone who can build your product, the backend infrastructure often matters far more to the development team than the customers.  \n\n\nIt is worth knowing if a good portion of your customer base would need things deployed in azure or aws specifically, but if not, than chances are they don't care. Most are very similar and it just dictates who you hire down the road based on what you've built.   \n\n\nIt is much harder to try and set up an \"ideal environment\" for a developer than to have one build it. You almost certainly will not set up his or her ideal environment and without technical capital on your team you don't have any way of definitively standing your ground against it changing all over and eating costs because you don't understand the reasoning they give enough to have an educated conversation.  \n\n\nLast point, if you hadn't decided on this already, this person should have ownership stake in your company. You need to make sure there is long-term scalability and viability prioritized as well as near-term success.",
            "score": 1,
            "author": "lamosteller5",
            "replies": [
                {
                    "level": 1,
                    "comment": "Thanks for your input and we learned that lesson the hard way. The people we have talked to just don't know the technical side enough to make it happen and have been a waste of time.\n\nI agree with everything that you are saying, but we are having a hard time recruiting the right person for all the usual reasons. We are nobodies, we have no money and we don't have a product to prove our viability.\n\nAt this point we want to give the person an ownership stake as we want someone who has a vested interest in the success of this product. If you have any suggestions on where to find these type of people I am all ears. I am trying to make better use of places like Indie Hacker, here, linkedin and my own network. If there are other locations that you could suggest I would really appreciate it!",
                    "score": 1,
                    "author": "brassmarlin",
                    "replies": [
                        {
                            "level": 2,
                            "comment": "I'd pay a contractor to get even a non-working demo of the product. Getting someone to take on a 100% equity stake is going to be tough with no funding yet. You may be able to get funding if you at least establish market demand first.  \n\n\nOnce you do have payroll, it's worth noting you can allocate development costs as R&amp;D vs. payroll which does help. Best of luck.",
                            "score": 1,
                            "author": "lamosteller5",
                            "replies": [
                                {
                                    "level": 3,
                                    "comment": "I appreciate it!",
                                    "score": 1,
                                    "author": "brassmarlin"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "level": 0,
            "comment": "It doesn't matter what stack you use. Just pick a stack based on the talent that you hire. It doesn't matter if you pick mean/mern/mevn/Django-React/etc. All of these stacks can solve the exact same problem. \n\nSame thing applies if you're doing machine learning, there's going to be a few major frameworks that you'll use, just put both in your job ad. Most likely you don't need to worry about scalability you just have to worry about building an MVP. \n\nOptimization comes later. Break things into separate servers to help switch things out if that given piece causes problems in the future e.g. too slow. \n\nOf course a dev shop is quoting a lot they're a dev shop. \n\nYou need to hire 1 or 2 programmers that can iterate quickly and have a significant interest in the company. Most programmers will be around for 1-3 years tenure.",
            "score": 1,
            "author": "ragnorok3"
        },
        {
            "level": 0,
            "comment": "If you talking to dev shops that will charge 100k you might as well hire a few consultants to help you with the roadmap.",
            "score": 1,
            "author": "ragnorok3",
            "replies": [
                {
                    "level": 1,
                    "comment": "that is a good idea. so far we have only been able to connect with dev shops, but i will start looking for consultants. as that is what would ease my mind a little bit. the dev shop that we have been talking with says that they can build it, but it seems like it would be much better to have a clear idea of what should be built and how we will be able to keep it running once the dev shop is done.",
                    "score": 1,
                    "author": "brassmarlin"
                }
            ]
        },
        {
            "level": 0,
            "comment": "[removed]",
            "score": 1,
            "author": "[deleted]"
        },
        {
            "level": 0,
            "comment": "Find a great partner to work with. On that note you've probably received messages from half a dozen people already. One thing I would do is relook at the tech requirement. Accept that all code in the MVP will get thrown away. Then use a low code/no code platform. A lot coffee platform may be too limiting so no code may make it easier. This way you can delay most of the technical decisions till a later point.\n\nThe other reason to consider a low code no code platform is it will make it easier for you to be directly involved. \n\nIf data management is a major part of the project, I'd strongly consider using air table.",
            "score": 1,
            "author": "ali-hussain"
        },
        {
            "level": 0,
            "comment": "Can you do what you require just using excel.",
            "score": 1,
            "author": "s3237410"
        },
        {
            "level": 0,
            "comment": "A question that may help (I don\u2019t have enough info on the premise) : How can you deliver the value you think customers are looking for to 3 customers, no matter how manual that delivery mechanism is? Many startups want to jump to building scalable tech too early. Often what you need is a cobbled together solution that can serve to test the core hypothesis. You\u2019re looking to learn and disprove your guesses, which you should assume are probably wrong.",
            "score": 1,
            "author": "idea-freedom",
            "replies": [
                {
                    "level": 1,
                    "comment": "i am going to spend some time considering this. you are correct we haven't thought about the issue that way yet.",
                    "score": 1,
                    "author": "brassmarlin"
                }
            ]
        },
        {
            "level": 0,
            "comment": "The tools required for the job, depend on the job. There is no \"right\" stack. Answer more basic questions first - do they need an application or does it need to be web browser based? Is it a static website, or do you need a backend? If yes, what are the things the backend needs to do? etc",
            "score": 1,
            "author": "tf_tunes"
        },
        {
            "level": 0,
            "comment": "well so I sent you a chat request.  and I sent you a pm.\n\nyou might've started by answering them.",
            "score": 1,
            "author": "KusUmUmmak"
        },
        {
            "level": 0,
            "comment": "I recommend taking a sec to think through what you build versus what you buy as you think through your tech stack. This has made a huge difference in my experience. I saw this post recently which might be helpful to you: https://scalableoperations.substack.com/p/to-build-or-to-buy-that-is-the-question.",
            "score": 1,
            "author": "Intelligent_Gap_4982",
            "replies": [
                {
                    "level": 1,
                    "comment": "this is great. thanks so much for sharing!",
                    "score": 1,
                    "author": "brassmarlin"
                }
            ]
        },
        {
            "level": 0,
            "comment": "Once you have your product designed, you'll easily be able to find an agency or a freelancer to develop it. Hit me up if you need a UX/UI expert to help you out with the design. I'm the founder of jimdesigns.co",
            "score": 1,
            "author": "JimDesignsCo"
        },
        {
            "level": 0,
            "comment": "Hello!\n\n&amp;#x200B;\n\nI know it's not exactly what you're asking for but I work for a BPO tactical accounting firm that specializes in startup accounting, fractional CFO services and Tech Stack implementation. \n\n&amp;#x200B;\n\nIf you're interested in connecting, I would love to hear more about your situation and see if I can help! (If I can't, I bet I can at least point you in the right direction)\n\n&amp;#x200B;\n\nFeel free to send me an email at [eklein@montpac.com](mailto:eklein@montpac.com).\n\n&amp;#x200B;\n\nCheers!\n\n&amp;#x200B;\n\nEric Klein",
            "score": 1,
            "author": "AccountingSolution4u"
        },
        {
            "level": 0,
            "comment": "First, I would like to see your technical specifications (requirements document) and understand the markets you plan to operate in. If you intend to target the international market, you should start with hosting. I would recommend AWS as it would be optimal in the long run. From your message, it's not entirely clear what your MVP will entail. Is it a website? A platform? Who is your target audience (B2C, B2B), and so on? Make the technical specifications as clear as possible, thoroughly describing the business processes, and you will understand what needs to be implemented here and now for quick testing of your hypotheses.",
            "score": 1,
            "author": "slavafree120"
        },
        {
            "level": 0,
            "comment": "I wanted to say thank you to everyone who responded to this post. It has been great interacting with people who have experience in the area that we have been lacking! The feedback that you guys have given us has really improved our strategy, given us a lot more confidence and most importantly some much needed direction.",
            "score": 1,
            "author": "brassmarlin"
        },
        {
            "level": 0,
            "comment": "Get onto Webflow or Framer and hack something together yourselves.\n\nYou'll learn a lot, get your MVP and be able to better communicate your idea",
            "score": 0,
            "author": "edzorg"
        }
    ]
}