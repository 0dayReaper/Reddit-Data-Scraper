{
    "id": "12daasl",
    "score": 10,
    "title": "Is there something that CMU SCS could have taught better?",
    "author": "HopeIsGold",
    "date": 1680759157.0,
    "url": "https://www.reddit.com/r/cmu/comments/12daasl",
    "media_urls": [],
    "other_urls": [],
    "postText": "CMU is undoubtedly the contender for the #1 position in the rank of CS departments. But that doesn't necessarily imply that there is no room for improvement. There may be some.\n\nTo the alumni or current students of CMU SCS who have worked with students from other schools either in industry or in a research setting, do you find anything that SCS could have taught you better? If not, why do you think so?\n\n&amp;#x200B;\n\nEDIT: Looking at the comments, there seems to be no complaint regarding the intro (core) CS courses. Everyone seems to be happy with them. Nice! I have seen students generally complaining about their lower div courses in other colleges.",
    "comments": [
        {
            "level": 0,
            "comment": "There was no technical writing requirement when I was there and I wish I had that instead of Interp.",
            "score": 10,
            "author": "play_or_draw",
            "replies": [
                {
                    "level": 1,
                    "comment": "Now, we have _both_ interp and technical writing! : )\n\nAllegedly, there is a CS-focused technical writing section now which was well-received by students.",
                    "score": 7,
                    "author": "moraceae",
                    "replies": [
                        {
                            "level": 2,
                            "comment": "*chatGPT enters the thread*\n\n\"Am I part of the curriculum now?\"  (i.e. how to use LLMs for doing these kind of tasks)",
                            "score": 0,
                            "author": "msew"
                        }
                    ]
                }
            ]
        },
        {
            "level": 0,
            "comment": "Personal hygiene",
            "score": 31,
            "author": "scottcmu"
        },
        {
            "level": 0,
            "comment": "I think it depends on where you're trying to go in your career.  I did the software engineering minor and learned a lot of \"practical industry\" things that weren't in the CS curriculum, eg. 3rd party dependency management, build systems, continuous testing, design patterns, etc.  The professors were also very flexible in terms of frameworks for assignments.  ie. in 15-112 you can use any python game engine for the final project, in 15-214 I was able to use GWT (webapp) instead of swing for scrabble.\n\nThe CS curriculum is very flexible, so if you lean more into the theory courses, of course you're going to miss out on \"practical\" applications and vice versa.  But overall, the CMU curriculum blows mostly everyone I've worked with in industry out of the water.",
            "score": 9,
            "author": "ImOnLinuxBitch",
            "replies": [
                {
                    "level": 1,
                    "comment": "Which classes would you recommend for the practical industry software engineering courses?",
                    "score": 1,
                    "author": "sp-dev",
                    "replies": [
                        {
                            "level": 2,
                            "comment": "So it depends on what you mean by \"practical\".  I'd say if your goal is to get hired by a big tech company, you need 15-112 / 15-210 / 15-213 to pass the interviews.  As a new hire, 15-112 / 15-214 are probably the most \"practical\" classes.  Then as you move up the eng ladder, other courses become more important, like 15-440, 15-213, 15-251, 15-451.\n\nAnd as I mentioned before, the classes are what you make them.  For example, in 15-214 there's a lab where you build a scrabble game.  The only requirements are for you to use java / swing.  At the time I took it, GWT was a huge thing so I asked if I could use it instead of swing (which I hate).  The professor gave the thumbs up, and I made a full fledged web app, with a mysql database and that connected to the CMU LDAP directory to do leaderboards by department, etc.  I used maven for dependency management, wrote webdriver tests, etc.  I learned a lot on that project.  Other people who just used java/swing probably didn't get as much out of it.  This applies to most projects in most classes throughout your years.\n\n&amp;#x200B;\n\nEdit: And how could I forget -- I interned as a SWE every summer, starting freshman year, so that gave me tons of \"practical\" experience.  So definitely go to the TOC.",
                            "score": 3,
                            "author": "ImOnLinuxBitch"
                        },
                        {
                            "level": 2,
                            "comment": "Would like to know too",
                            "score": 1,
                            "author": "AngeFreshTech"
                        }
                    ]
                }
            ]
        },
        {
            "level": 0,
            "comment": "CMU is #1 in the ranking because of research. Not because of teaching. Teaching courses isn't the main thing any tenure track professor is focusing on.",
            "score": 6,
            "author": "akindofyoga",
            "replies": [
                {
                    "level": 1,
                    "comment": "While true, I think this understates our emphasis on teaching a bit. CMU has many [teaching track professors](https://scsdean.cs.cmu.edu/policy/teaching-track.html), and while they aren't tenured, my understanding is that renewal is basically a formality for those who've been here for a while. Lots of professors like Tom Cortina, Mark Stehlik, Klaus Sutner, Clive Newstead, etc. are teaching professors.",
                    "score": 6,
                    "author": "air-wreck",
                    "replies": [
                        {
                            "level": 2,
                            "comment": "None of them have anything to do with CMU's ranking in CS.",
                            "score": -1,
                            "author": "akindofyoga",
                            "replies": [
                                {
                                    "level": 3,
                                    "comment": "Chill dude",
                                    "score": 3,
                                    "author": "Rememberthisisreddit"
                                }
                            ]
                        }
                    ]
                },
                {
                    "level": 1,
                    "comment": "I'm not sure which ranking your referring to but most include some aspects other than research",
                    "score": 2,
                    "author": "Rememberthisisreddit"
                },
                {
                    "level": 1,
                    "comment": "This is essentially what I was thinking too. There has been a push over the last decade to deemphasize practical programming skills in C and C++ which are still standard across many professional sectors, and work on stuff that is academically interesting like SML. That means it\u2019s great if you want to do research or become a professor, but often other schools where they focus on practical skills might have a leg up.",
                    "score": 1,
                    "author": "n3rd_rage",
                    "replies": [
                        {
                            "level": 2,
                            "comment": "Functional programming is useful to learn just because it changes the way you think. However, teaching OCAML instead of SML would be better for students.",
                            "score": 2,
                            "author": "akindofyoga",
                            "replies": [
                                {
                                    "level": 3,
                                    "comment": "There are two main reasons SML is taught instead of OCaml.  \nMostly its because SML was proven safe by Bob Harper and has always had a leg up due to his support (and majority support of PL department people).\n\nSecond, its because in introductory courses like 15-150, OCaml has a lot of imperative features (as it is a multi-paradigm language) that would allow students to write \"imperative-functional\" code, whereas in SML those features are much more difficult to use, making it easier to force students to learn the functional features that those courses are trying to teach anyways.\n\nAlso, these classes are about teaching concepts anyways. I learned OCaml in less than a week after taking 15-150 for compilers, if you know SML you know OCaml. But I digress.",
                                    "score": 1,
                                    "author": "sockwars12"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "level": 0,
            "comment": "Not enough C++ classes.",
            "score": 2,
            "author": "AustRilic"
        },
        {
            "level": 0,
            "comment": "Software engineering should be in there as a requirement, not a fairly rare option.  Even if you're doing research, knowing how to write production code makes you better at pretty much everything.\n\nOr, I feel one decent software engineering course would be enormously more beneficial than calc in 3D, which you're only gonna want if you're taking graphics.\n\nIf I was gonna pick a second change, it'd be nice to see a business minor well-tuned to pair with the CS degree, for folks who want to use CS to head into something like product management and/or building out startups.",
            "score": 2,
            "author": "talldean"
        },
        {
            "level": 0,
            "comment": "Many of the computational biology (which is under SCS at CMU) higher level courses are very poorly structured and taught. Computational genomics (02-510/02-710) is unfortunately one of the most poorly organized and managed courses I have ever taken.\n\nThat being said, there are a lot of great comp bio courses here! 02-251 and 02-761/2 are very cool and well taught!",
            "score": 2,
            "author": "Electrical-Safety-48"
        }
    ]
}